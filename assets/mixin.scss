@use "sass:math";

//       mixin 系
//++++++++++++++++++++++++++++++++++

/* ===========================================
  メディアクエリ関係
============================================ */
/*====== メディアごとの幅 ======*/
$width-sp: 767px; // max-width
$width-tab: 768px; // min-width
$width-pc: 1025px; // min-width


//ボタン
@mixin common-btn($background-color, $color, $width, $radius) {
  color: $color;
  width: $width;
  background-color: $background-color;
  text-align: center;
  border-radius: $radius;
}

/*====== ブレイクポイント ======*/
$breakpoint: (sp: 'screen and (max-width: 767px)',
  tab: 'screen and (min-width: 768px)',
  tab-pc: 'screen and (min-width: 768px) and (max-width: 1024px)',
  pc: 'screen and (min-width: 1025px)',
);

/* ===========================================
  Breakpoints
============================================ */
/*====== 固定メディアクエリ指定 ======*/
@mixin mq_fixed($bp) {
  @media #{map-get($breakpoint, $bp)} {
    @content;
  }
}

/*====== 変動メディアクエリ指定 ======*/
@mixin mq_var($min, $max) {
  @media screen and (min-width: #{$min}) and (max-width: #{$max}) {
    @content;
  }
}


/* ===========================================
  flex
============================================ */
/*====== 上下左右中央よせ ======*/
// 呼び出し例
// @include f-center(フレックスを解除するタイミング)
@mixin f-center($cancelPoint: false) {
  display: flex;
  display: -webkit-flex;
  display: -ms-flexbox;
  align-items: center;
  justify-content: center;

  // フレックスを解除するタイミングがあれば
  @if $cancelPoint {
    @media screen and (max-width: $cancelPoint) {
      display: block;
    }
  }
}

/*====== 上下中央左右space-between ======*/
@mixin f-a_center-j_between($cancelPoint: false) {
  display: flex;
  display: -webkit-flex;
  display: -ms-flexbox;
  align-items: center;
  justify-content: space-between;

  // フレックスを解除するタイミングがあれば
  @if $cancelPoint {
    @media screen and (max-width: $cancelPoint) {
      display: block;
    }
  }
}

/*====== フレックスの指定 ======*/
// 呼び出し例
// @include f-select(center, space-around, row-reverse, wrap, 1000px)
@mixin f-select($align: false,
  $justify: false,
  $direction: false,
  $wrap: false,
  $cancelPoint: false) {
  display: flex;
  display: -webkit-flex;
  display: -ms-flexbox;

  @if $align {
    align-items: $align;
  }

  @if $justify {
    justify-content: $justify;
  }

  @if ($direction) {
    flex-direction: $direction;
  }

  @if ($wrap) {
    flex-wrap: $wrap;
  }

  // フレックスを解除するタイミングがあれば
  @if $cancelPoint {
    @media screen and (max-width: $cancelPoint) {
      display: block;
    }
  }
}

/*====== ポジションcenter ======*/
// ※親要素にposition: relative; 推奨
@mixin p-center($direction: xy) {
  position: absolute;

  @if $direction==xy {
    top      : 50%;
    left     : 50%;
    transform: translate(-50%, -50%);
  }

  @else if $direction==x {
    left     : 50%;
    transform: translateX(-50%);
  }

  @else if $direction==y {
    top      : 50%;
    transform: translateY(-50%);
  }
}